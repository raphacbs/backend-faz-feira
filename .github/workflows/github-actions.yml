name: Build and Deploy
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn clean package -DskipTests=true

      - name: Run Tests
        run: mvn --batch-mode -Dmaven.test.failure.ignore=true test
      - name: Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Deploy JAR to VPS
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_SERVER_DIY_COMPANY }}
          ARGS: "-rlgoDzvc -i --delete"
          SOURCE: "target/app-faz-feira.jar"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}

      - name: Deploy DOCKERFILE to VPS
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_SERVER_DIY_COMPANY }}
          ARGS: "-rlgoDzvc -i --delete"
          SOURCE: "Dockerfile"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}

      - name: Run container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY_SERVER_DIY_COMPANY }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            CONTAINER_NAME="api-faz-feira"
            IMAGE_NAME="openjdk:19"
            NETWORK_NAME="bridge"
            DATABASE_HOST="postgresql://${{ secrets.REMOTE_HOST }}:${{ secrets.REMOTE_DATABASE_PORT }}/${{ secrets.REMOTE_DATABASE_NAME }}"
            DATABASE_USER="${{ secrets.REMOTE_DATABASE_USER }}"
            DATABASE_PASSWORD="${{ secrets.REMOTE_DATABASE_PASSWORD }}"
            X_API_PLACE_TOKEN="${{ secrets.X_API_PLACE_TOKEN }}"
            X_COSMOS_TOKEN=${{ secrets.X_COSMOS_TOKEN }}
            JAR_FILE_PATH="${{ secrets.REMOTE_TARGET }}/app-faz-feira.jar"
            TZ="America/Sao_Paulo"
            if [ "$(docker ps -a -q -f name=$CONTAINER_NAME)" ]; then
              echo "Parando e removendo o contêiner existente..."
              docker stop $CONTAINER_NAME
              docker rm $CONTAINER_NAME
            else
              echo "Nenhum contêiner com o nome $CONTAINER_NAME encontrado."
            fi
            docker build -t api-faz-feira-img ${{ secrets.REMOTE_TARGET }}
            docker run -d --name $CONTAINER_NAME --network $NETWORK_NAME -p 8081:8081 -v $JAR_FILE_PATH:/app/app-faz-feira.jar -e DATABASE_HOST=$DATABASE_HOST -e DATABASE_USER=$DATABASE_USER -e DATABASE_PASSWORD=$DATABASE_PASSWORD -e X_API_PLACE_TOKEN=$X_API_PLACE_TOKEN -e TZ=$TZ api-faz-feira-img